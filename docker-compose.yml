services:
  app:
    build: .
    image: app
    container_name: app
    restart: always
    ports:
      - "${APP_PORT}:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./static:/app/static
      - ./templates:/app/templates
  db:
    image: postgres:17-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_EXPOSED_PORT}:${DB_PORT}"
  test_db:
    image: postgres:17-alpine
    container_name: test_db
    restart: always
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASS}
      POSTGRES_DB: ${TEST_DB_NAME}
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
    ports:
      - "${TEST_DB_EXPOSED_PORT}:${TEST_DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TEST_DB_USER} -d ${TEST_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "${REDIS_EXPOSED_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  postgres_data_test:
  redis_data:
